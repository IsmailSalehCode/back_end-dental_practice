const {
  AppointmentForm,
  AppointmentDateTime,
  Sequelize,
} = require("../models");
const config = require("../config/config");
const { Op } = require("sequelize");
const { DateTime } = require("luxon");

function UTC_to_SofiaTZ(objs, wantsAppointmentFormIds) {
  const result = [];
  for (let i = 0; i < objs.length; i++) {
    let element = objs[i];
    const iterISO = new Date(element.datetime).toISOString();
    const luxonDT = DateTime.fromISO(iterISO).setZone("Europe/Sofia");
    if (wantsAppointmentFormIds) {
      result.push({
        id: element.id,
        datetime: luxonDT.toFormat("y-LL-dd HH:mm"),
        appointmentFormId: element.appointmentFormId,
      });
    } else {
      result.push({
        id: element.id,
        datetime: luxonDT.toFormat("y-LL-dd HH:mm"),
      });
    }
  }
  return result;
}

module.exports = {
  async addForm(req, res) {
    /*here I will need a transaction so that
    1)I create the new AppointmentForm
    2)I patch the appointment-datetime instance's appointmentFormId
    */
    const t = await config.db.transaction({
      isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.READ_COMMITTED,
    });
    /**
     * {
     "isNewPatient": true,
     "helpWith": "emergency/tooth pain",
     "name": "Isi",
     "phone": null,
     "email": "isi_4@abv.bg",
     "message": null,
     "appointmentDateTimeId": 2
    }
    */
    try {
      // 1)I create the new AppointmentForm
      const newForm = await AppointmentForm.create(
        {
          isNewPatient: req.body.isNewPatient,
          helpWith: req.body.helpWith,
          name: req.body.name,
          phone: req.body.phone,
          email: req.body.email,
          message: req.body.message,
        },
        { transaction: t }
      );
      //===================================
      console.log("newForm autogenerated id -> " + newForm.id);
      //2)I patch the appointment-datetime instance's appointmentFormId
      //const targetDateTime = await AppointmentDateTime.findByPk(
      //  req.body.appointmentDateTimeId
      //);
      await AppointmentDateTime.update(
        { appointmentFormId: newForm.id },
        {
          where: {
            id: req.body.appointmentDateTimeId,
          },
          transaction: t,
        }
      );
      //===================================
      await t.commit();
      return res.sendStatus(200);
    } catch (err) {
      await t.rollback();
      console.error("err in addForm");
      console.error(err);
      return res.sendStatus(500);
    }
  },

  async addDateTime(req, res) {
    try {
      //frontend passes UTC ISO string
      const UTC_ISO_dt = req.body.datetime;
      // we save the UTC ISO string
      await AppointmentDateTime.create({ datetime: UTC_ISO_dt });
      return res.sendStatus(200);
    } catch (err) {
      if (
        err.errors != undefined &&
        err.errors[0].message == "datetime must be unique"
      ) {
        return res.sendStatus(409);
        //datetime must be unique
      }
      console.log(err);
      return res.sendStatus(500);
    }
  },

  async deleteDateTime(req, res) {
    const t = await config.db.transaction({
      isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.READ_COMMITTED,
    });
    try {
      const dateTimeToDestroy = req.obj;
      // check if datetime has an appointment assigned to it, meaning appointmentFormId!=null
      // Delete the appointment form if yes
      const appointmentFormId = req.obj.appointmentFormId;
      if (appointmentFormId != null) {
        await AppointmentForm.destroy({
          where: {
            id: appointmentFormId,
          },
          transaction: t,
        });
      }

      await dateTimeToDestroy.destroy({ transaction: t });
      await t.commit();
      return res.sendStatus(200);
    } catch (err) {
      await t.rollback();
      console.error(err);
      return res.sendStatus(500);
    }
  },
  async getSpecificForm(req, res) {
    try {
      return res.status(200).send(req.form);
    } catch (err) {
      return res.sendStatus(500);
    }
  },

  async getAvailableDateTimes(req, res) {
    //using current utc date for comparison, cuz i am storing added dates in utc format anyway
    const currentUTC_Date = new Date();
    // console.log("currentUTC_Date");
    // console.log(currentUTC_Date);
    try {
      const objs = await AppointmentDateTime.findAll({
        where: {
          appointmentFormId: null,
          [Op.and]: [
            {
              datetime: {
                [Op.gt]: currentUTC_Date,
              },
            },
          ],
        },
        attributes: {
          exclude: ["appointmentFormId"],
        },
      });
      //UTC -> Europe/Sofia timezone ======================
      const result = UTC_to_SofiaTZ(objs, false);
      // ===================================================

      return res.status(200).send(result);
    } catch (err) {
      return res.sendStatus(500);
    }
  },
  async getDateTimes(req, res) {
    try {
      const objs = await AppointmentDateTime.findAll();
      //UTC -> Europe/Sofia timezone ======================
      const result = UTC_to_SofiaTZ(objs, true);
      // ===================================================
      return res.status(200).send(result);
    } catch (err) {
      return res.sendStatus(500);
    }
  },

  async deleteForm(req, res) {
    try {
      const objToDestroy = req.form;

      await objToDestroy.destroy();

      return res.sendStatus(200);
    } catch (err) {
      return res.sendStatus(500);
    }
  },
};
